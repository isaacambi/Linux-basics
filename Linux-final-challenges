
b needs your help to get his app ready in time for the client presentation!


His app is working perfectly on his own laptop, but while transferring the code to the Dev servers, things are not working as expected!

Wherever required, use sudo to run commands as the root user. Bob's password is caleston123.

Proceed to the next question to see the application architecture.

2. Here is the simple architecture diagram of the implementation. This is a two-tier application.


The web server is hosted on devapp01.

The DB server is hosted on devdb01

Bob has done his bit when it comes to the code. Everything is set up to work properly.

All you need to do is to fix some of the things he has missed while migrating the code and the database on the DEV servers.
servers.

3. Copy the file caleston-code.tar.gz from Bob's laptop to Bob's home directory on the webserver devapp01

Bob's password is caleston123
solution

Run the pwd and ls commands to check the current path and to list the files and directories as follows: -

bob@caleston-lp10:~$ pwd
/home/bob
bob@caleston-lp10:~$ 
bob@caleston-lp10:~$ ls
caleston-code.tar.gz  media



Use the scp command to transfer the files to the remote server as follows: -

bob@caleston-lp10:~$ scp caleston-code.tar.gz bob@devapp01:~/

4. On the devapp01 webserver, unzip and extract the copied file in the directory /opt/.

The password for the devapp01 webserver is caleston123.
solution
ssh bob@devapp01
bob@devapp01:~$ sudo tar -C /opt/ -xvf caleston-code.tar.gz
sudo: sudo stands for "superuser do," and it is used to execute commands with elevated 
privileges or as the superuser (often referred to as "root" in Unix-based systems). When 
you use sudo, you are essentially running the subsequent command with administrative permissions,
 which are required for some operations, such as extracting files to directories that may be restricted.

tar: tar is a command-line utility in Unix-like operating systems (including Linux) used for 
archiving and extracting files and directories. In this context, it is used to extract files 
from a compressed archive.

-C /opt/: This is an option passed to tar. It specifies the directory where you want to extract
 the contents of the archive. In this case, the directory is /opt/. The -C option changes to the
 specified directory before performing the extraction.

-xvf: These are additional options passed to tar:

-x: This option tells tar to extract files from the archive.
-v: This option stands for "verbose" and makes tar display information about the files as they
 are extracted. It shows you the names of the files being processed.
-f caleston-code.tar.gz: This part of the command specifies the name of the archive file that 
you want to extract. In this case, it's caleston-code.tar.gz.
So, when you run this command, it will:

Use sudo to execute the tar command with elevated privileges if necessary.
Change to the /opt/ directory using the -C option.
Extract the contents of the caleston-code.tar.gz archive file in a verbose mode, meaning it
 will display the names of the files being extracted.
The end result will be that the contents of the caleston-code.tar.gz archive will be extracted
 into the /opt/ directory.

5. Delete the tar file from devapp01 webserver.
solution
bob@devapp01:~$ pwd
/home/bob
bob@devapp01:~$ rm -rf caleston-code.tar.gz

6. Make sure that the directory is extracted in such a way that the
 path /opt/caleston-code/mercuryProject/ exists on the webserver.
solution
ls /opt/caleston-code/mercuryProject/ admin.json blog db.json manage.py media mercury

7. For the client demo, Bob has installed a postgres database in devdb01.

SSH to the database devdb01 and check the status of the postgresql.service

What is the state of the DB?

Bob's password is caleston123
solution
Make use of the ssh command to log in to the remote server: -

bob@devapp01:~$ ssh devdb01

It will ask for the password, type the caleston123

Check the status of the postgresql service: -

bob@devdb01:~$ sudo systemctl status postgresql


8. Add an entry host all all 0.0.0.0/0 md5 to the end of the file /etc/postgresql/10/main/pg_hba.conf on the DB server.

This will allow the web application to connect to the DB.
solution
devdb01:~$ sudo vi /etc/postgresql/10/main/pg_hba.conf 

9. Start the postgres DB on the devdb01 server.
solution
sudo systemctl start postgresql

10. What port is postgres running on? Check using the netstat command?
solution
sudo netstat -natulp | grep postgres | grep LISTEN

sudo: Similar to previous explanations, sudo stands for "superuser do" and is used to run
 commands with elevated privileges. It's often required for commands that need to access 
system-level information.

netstat: netstat is a command-line utility that displays network-related information. In this
 case, it is being used to list network connections, network interfaces, routing tables, 
interface statistics, masquerade connections, and multicast memberships.

-natulp: These are options and flags that are passed to the netstat command:

-n: This option tells netstat to display numerical addresses instead of resolving hostnames
 to IP addresses. This can make the output more concise.
-a: This option instructs netstat to show all sockets, including both listening and non-listening
 sockets.
-t: This flag filters the output to show only TCP connections.
-u: This flag filters the output to show only UDP connections.
-l: This flag instructs netstat to display listening sockets (those that are actively waiting
 for incoming connections).
-p: This flag displays the process ID and name of the program to which each socket belongs.
|: This is a pipe symbol. It is used to take the output of the preceding command (sudo netstat -natulp)
 and pass it as input to the next command.

grep postgres: grep is a command-line utility for searching text patterns. In this case, it is used
 to search for lines in the output of the netstat command that contain the word "postgres." This is
 done to filter the output to only include lines related to PostgreSQL.

grep LISTEN: This is a second grep command that is used in combination with the previous one. It further
 filters the output to only include lines that contain the word "LISTEN." In the context of network
 connections, "LISTEN" indicates that a service or process is actively listening for incoming connections 
on a specific port.

So, when you run this command, it will display a list of listening TCP and UDP sockets,
 and then filter the output to show only the lines related to PostgreSQL processes that are actively 
listening for incoming connections. This can be useful for checking if the PostgreSQL server is running
 and listening for connections on your system.






Regenerate


11. Back on the devapp01 webserver. Attempt to start the web application by:

    Navigate to the directory /opt/caleston-code/mercuryProject
    Next, run the command python3 manage.py runserver 0.0.0.0:8000


Was the command successful? Did the application load up?

Key in Control + C to get back to the bash prompt.
solution
the command was not successful.
If you are in the DB server then type exit or logout or make use of the ssh command.

ssh devapp01

and then run the cd command with the given path.

bob@devapp01:~$ cd /opt/caleston-code/mercuryProject/

bob@devapp01:/opt/caleston-code/mercuryProject$ pwd
/opt/caleston-code/mercuryProject

and run the command: - python3 manage.py runserver 0.0.0.0:8000

12. Why did the command not work?
connection refused to connect to the DB

13. Task 8:
It appears that Bob did not configure his app to connect a postgres database running on a different server.

That explains why things are working on his laptop and not in the DEV servers.

It also appears that he is using the wrong port for postgres!

    Find the file in the directory under /opt/caleston-code that has a string matching DATABASES = {.
    Replace the value of localhost to devdb01
    In the same file fix the postgres port to match the port being used on devdb01

solution
grep -ir "DATABASES = {" /opt/caleston-code/
/opt/caleston-code/mercuryProject/mercury/settings.py:DATABASES = {

It showed that the database settings stored in this file: /opt/caleston-code/mercuryProject/mercury/settings.py

Use vim editor to update the database settings at below:
sudo vi /opt/caleston-code/mercuryProject/mercury/settings.py, if password is required, enter caleston123.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mercurydb',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'devdb01',
        'PORT': '5432â€™,
    }
}

Noted: need to update HOST and PORT to complete this task.

14. Task 9:

Now that has been set up, change the ownership of ALL files and directories under /opt/caleston-code to user mercury.

Bob's password is caleston123.
solution
Run the command: - sudo chown -R mercury /opt/caleston-code to recursively change ownership of files.

15. Great! Everything should now be in order to restart the application.

On the devapp01 server start the webserver again by running the command:

    Navigate to the directory /opt/caleston-code/mercuryProject
    Next, run the command python3 manage.py runserver 0.0.0.0:8000


Note:- Make sure to activate the virtual environment using source ../venv/bin/activate within the
 current project before executing python3 manage.py migrate.

Something like (venv) should now be a part of the prompt.

To access the application, click on the Project Mercury tab!

solution
cd /opt/caleston-code
source venv/bin/activate 

Apply database migrations:

cd /opt/caleston-code/mercuryProject
python3 manage.py migrate

Operations to perform:
  Apply all migrations: admin, auth, blog, contenttypes, portfolios, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying blog.0001_initial... OK
  Applying portfolios.0001_initial... OK
  Applying sessions.0001_initial... OK

Start the application


python3 manage.py runserver 0.0.0.0:8000

16. Well done! Now, for the final task before the client presentation.

Create a new service called mercury.service with the following requirements.

Service name: - mercury.service, WorkingDirectory: - /opt/caleston-code/mercuryProject/, 
Command to run: /usr/bin/python3 manage.py runserver 0.0.0.0:8000.

Restart on failure and enable for multi-user.target.

Run as user mercury.

Set description: Project Mercury Web Application.


Create the unit file under /etc/systemd/system. Once done, enable and start the mercury.service.

solution
sudo vi /etc/systemd/system/mercury.service

[Service]
ExecStart=/usr/bin/python3 manage.py runserver 0.0.0.0:8000
Restart=on-failure
WorkingDirectory=/opt/caleston-code/mercuryProject
User=mercury

[Install]
WantedBy=multi-user.target

sudo systemctl enable --now mercury.service

sudo systemctl status mercury.service

17. Congratulations! You did it! Just in the nick of time too!

You should now be able to access the web application by clicking on the Project Mercury tab above the terminal.










