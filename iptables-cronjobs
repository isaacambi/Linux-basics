P TABLES
1. In this Lab, we will secure the development environment by making use of iptables.


Wherever required, use sudo to run commands as the root user. Bob's password is caleston123.

2. Here is the simple architecture diagram of the implementation. This is a two-tier application.


The web server is hosted on devapp01.

The DB server is hosted on devdb01.

The Software Repository is hosted on caleston-repo-01.
Here are the connectivity requirements:

    SSH should be allowed from Bob's laptop to both Web and DB servers.
    HTTP/80 from the Web Server should be accessible from Bob's laptop.
    The Web Server should be able to access the Software Repository server at port 80
solution

3. Install iptables on devapp01 and devdb01 servers
ssh devapp01
ssh devdb01

Run: sudo apt install iptables

4. Are there any iptable rules created on either Web Server or DB Server right now?
solution
Use the iptables -L command to list the rules.
Ans = No

5. On devapp01, add an incoming rule permitting SSH and HTTP connection from Bob's Laptop.

Bob's Laptop has an IP address of 172.16.238.187.
solution
ssh devapp01
Run: sudo iptables -A INPUT  -p TCP -s 172.16.238.187 --dport 22 -j ACCEPT 
and sudo iptables -A INPUT  -p TCP -s 172.16.238.187 --dport 80 -j ACCEPT

6. Now, lockdown incoming traffic on devapp01. Drop incoming connections from any
 source on any destination port for any protocol (TCP/UDP).

Remember, this rule should be at the bottom of the chain for the SSH and HTTP access
 from caleston-lp10 to work.
Run: sudo iptables -A INPUT -j DROP

7. On devapp01, add an outgoing rule permitting access to port 5432 on devdb01 and HTTP
 access to caleston-repo-01. Once this is done, block outgoing traffic to any destination
 on http/https ports from devapp01

Note: caleston-repo-01 has the ip address of 172.16.238.15

solution

Run: sudo iptables -A OUTPUT -p TCP -d 172.16.238.11 --dport 5432 -j ACCEPT
sudo iptables -A OUTPUT -p TCP -d 172.16.238.15 --dport 80 -j ACCEPT

sudo iptables -A OUTPUT -p tcp --dport 80 -j DROP

sudo iptables -A OUTPUT -p tcp --dport 443 -j DROP


8. Add an OUTPUT rule to the top of the chain which will allow https connection to google.com on devapp01
solution
Run: sudo iptables -I OUTPUT -p tcp -d google.com --dport 443 -j ACCEPT

CRON JOBS
1. Which command is used to list all the cronjobs created for a user?
solution
crontab-l

2. How many cronjobs are currently scheduled for bob?
solution
6

3. How about now? How many cronjobs are scheduled for the root user ?
solution
one

4. Inspect the cronjobs scheduled for bob again. Which command/script is run at 11 minutes past 11 PM every Tuesday?
solution
Inspect the cronjobs scheduled.
The Day of the Week (5th column) should be Tuesday = 2

The hour(2nd column) should be 11 PM = 23

The minute (1st column) should be 11 minutes = 11

This transalates to 11 23 * * 2. The script that runs at this specific schedule is /usr/local/bin/system-identifier.sh

Bonus Hint: Use this handy site to predict a outcome of a Cron configuration:
https://cronjob.xyz/

5. Schedule a cronjob to run the script /usr/local/bin/last-reboot.sh on the first day of every month at 6 AM.

The script should not run any other day.
solution
Use: Run crontab -e. This will open the crontab in the VI Editor. Add the below line to the file:
0 6 1 * * /usr/local/bin/last-reboot.sh

6. When will the script /usr/local/bin/system-troubleshooter.sh be run?

Inspect the cronjobs scheduled for bob.
solution
The first column is 11 = 11th minute

The second column is 23 = 11 PM

The third column is * = every day in a month (1st to the last day of the month)

The fourth column is 2 = only the month of February

The fifth column is * = every day if the week (Monday to Sunday)

This means the script will run at 11 minutes past 11 PM on all days in the month of February

7. The script /usr/local/bin/system-debugger.sh was incorrectly scheduled. 
It should run every half hour at minute 0 and minute 30

Example: 09:00, 09:30, 10:00, 10:30, 11:00, 11:30……so on every half hour.
solution
Use Step values for the minute column = */30 OR

Specify the minute column as 00,30 both of which mean at minute zero then minute 30.
To sum up, add this to the crontab:
*/30 * * * * /usr/local/bin/system-debugger.sh

